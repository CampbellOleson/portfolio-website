{"ast":null,"code":"var _jsxFileName = \"/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx\";\nimport React from \"react\";\nimport Splash from \"../../assets/screenshots/fishhook/fh-splash.png\";\nimport Search from \"../../assets/screenshots/fishhook/fh-search.png\";\nimport Requests from \"../../assets/screenshots/fishhook/fh-requests.png\";\nimport Feed from \"../../assets/screenshots/fishhook/fh-feed.png\";\nimport Friends from \"../../assets/screenshots/fishhook/fh-friends.png\";\nimport UserFeed from \"../../assets/screenshots/fishhook/fh-userfeed.png\";\nimport Update from \"../../assets/screenshots/fishhook/fh-update.png\";\nimport Create from \"../../assets/screenshots/fishhook/fh-create.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/fishhook.css\";\n\nconst RipCamp = () => {\n  return React.createElement(\"div\", {\n    id: \"fishhook-wrapper\",\n    className: \"cs-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"cs-topper cs-white-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"cs-topper-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Fishhook\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Campbell Oleson\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"July 2019\")), React.createElement(\"summary\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"I engineered a social media site specifically tailored for the fishing community. The primary goal of this website is to give fishing enthusiasts an online platform where they can connect with one another, share their best catches, and discover new fishing spots.\"))), React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"catch-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Splash,\n    alt: \"Splash Page Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Assignment\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"During the later portion of my full-stack web development course with App Academy, I was tasked with single-handedly creating a full-stack web application, the purpose of which was my choosing. Considering the prevalence of fishing-themed Facebook groups, and the fact that I myself am an avid fly-fisher, I decided to create a social media platform specifically for people who love to fish (and talk about it).\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Planning\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"First and foremost, Fishhook had to provide a way for users to find and connect with one another. Secondly, users needed to be able to personalize their account and post content for their Fishhook friends to see. Lastly, I planned to add functionality that would allow users to share fishing spots with their friends leveraging Google Maps API.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Before I started developing Fishhook, I sat down and sketched out the backend architecture of my app, as well as all the frontend views that it would include. I didn\\u2019t have much time for this project, so after my pen-and-paper wireframes were complete, I began developing.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Features and Functionality\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"I implemented Fishhook using Ruby on Rails for the backend and PostgreSQL for the database. This way, I could leverage Rails\\u2019s convention-over-configuration philosophy for quick development, and SQL to manage relationships between different entities in my database, such as users, friend requests, and posts. I used Postman to test my backend API before moving on.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"On the frontend, I leveraged Redux to manage application state, and ReactJS to create a responsive user interface. I employed AJAX to send asynchronous requests to my backend API.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Users of Fishhook can search other users and friend-request them. If you want to friend-request a user, you can do so by navigating to their profile page and clicking the \\u201CAdd Friend\\u201D button. Incoming friend requests can be viewed in a dropdown modal. You can accept an incoming friend request, or delete it.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-img-small-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Search,\n    alt: \"Search Screenshot\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: Requests,\n    alt: \"Requests Modal Screenshot\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Once you\\u2019ve befriended a user, you can see their posts in the \\u201CFeed\\u201D component of the app. You can also navigate to a user\\u2019s profile page and see all the content that they have posted. Similarly, you can view a user\\u2019s friends on their profile page by clicking on the \\u201CFriends\\u201D tab.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-img-small-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: UserFeed,\n    alt: \"User Feed Screenshot\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: Friends,\n    alt: \"Friends Screenshot\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Feed,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Challenges\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Developing Fishhook presented me with a variety of challenges as a new developer. The first problem I ran into was how to create \\u201Cfriend-requests\\u201D between users, that, when accepted, would associate the users and allow them to see each other's content.\"), React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"I got around this by creating a \\u201Crequests\\u201D joins table using Ruby on Rails ORM. The table had columns for the \\u201Crequester_id\\u201D, the \\u201Crequested_id\\u201D, and a boolean status field indicating whether or not the request had been accepted. Users create entries in this table when they issue a friend request. Once the receiving user accepts the request, the status field is updated, and the entry becomes an association between the users.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-img-small-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Create,\n    alt: \"Create snippet\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    src: Update,\n    alt: \"Update snippet\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"I also ran into difficult bugs in this project, the most frustrating of which was an error in one of my Redux reducers. I had a JavaScript Object storing arrays. When I tried to copy this object into the updated application state, I used Object.assign(), which created a shallow copy, and preserved the object ids of the arrays inside.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"I spent hours searching for the cause of the unexpected behavior that ensued. Finally, when logging my application state changes with Chrome DevTools, I noticed that the contents of the arrays from previous state changes retroactively updated with each new state change. The \\u201Cold arrays\\u201D would update to have the same contents as the \\u201Cnew arrays\\u201D. This pointed me towards the source of the problem, and taught me a valuable lesson about object identity in JavaScript.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Conclusion\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"Fishhook was my first full-stack project at App Academy, and my first real venture into software development. It\\u2019s important to note that this project served as an educational experience for me. Not everything about the app is production quality, and there are still plenty of aspects for me to improve upon.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"I plan to continue to work on Fishhook to improve the user interface, make the layout more responsive to different device sizes, and add the rest of the functionality that I included in the blueprints. All things considered, Fishhook turned out to be an excellent learning experience, and gave me a strong sense of the fundamentals of web development.\"))));\n};\n\nexport default RipCamp;","map":{"version":3,"sources":["/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx"],"names":["React","Splash","Search","Requests","Feed","Friends","UserFeed","Update","Create","RipCamp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Splash from \"../../assets/screenshots/fishhook/fh-splash.png\";\nimport Search from \"../../assets/screenshots/fishhook/fh-search.png\";\nimport Requests from \"../../assets/screenshots/fishhook/fh-requests.png\";\nimport Feed from \"../../assets/screenshots/fishhook/fh-feed.png\";\nimport Friends from \"../../assets/screenshots/fishhook/fh-friends.png\";\nimport UserFeed from \"../../assets/screenshots/fishhook/fh-userfeed.png\";\nimport Update from \"../../assets/screenshots/fishhook/fh-update.png\";\nimport Create from \"../../assets/screenshots/fishhook/fh-create.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/fishhook.css\";\n\nconst RipCamp = () => {\n  return (\n    <div id=\"fishhook-wrapper\" className=\"cs-wrapper\">\n      <div className=\"cs-nav\" />\n      <section className=\"cs-topper cs-white-container\">\n        <div className=\"vert-center\">\n          <section className=\"cs-topper-info\">\n            <header>Fishhook</header>\n            <div>\n              <p>Campbell Oleson</p>\n              <p>July 2019</p>\n            </div>\n            <summary>\n              I engineered a social media site specifically tailored for the\n              fishing community. The primary goal of this website is to give\n              fishing enthusiasts an online platform where they can connect with\n              one another, share their best catches, and discover new fishing\n              spots.\n            </summary>\n          </section>\n        </div>\n        <div className=\"vert-center\">\n          <div id=\"catch-img\" />\n        </div>\n      </section>\n\n      <div className=\"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\">\n        <img src={Splash} alt=\"Splash Page Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Assignment</header>\n          <article>\n            During the later portion of my full-stack web development course\n            with App Academy, I was tasked with single-handedly creating a\n            full-stack web application, the purpose of which was my choosing.\n            Considering the prevalence of fishing-themed Facebook groups, and\n            the fact that I myself am an avid fly-fisher, I decided to create a\n            social media platform specifically for people who love to fish (and\n            talk about it).\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Planning</header>\n          <article>\n            First and foremost, Fishhook had to provide a way for users to find\n            and connect with one another. Secondly, users needed to be able to\n            personalize their account and post content for their Fishhook\n            friends to see. Lastly, I planned to add functionality that would\n            allow users to share fishing spots with their friends leveraging\n            Google Maps API.\n          </article>\n\n          <article>\n            Before I started developing Fishhook, I sat down and sketched out\n            the backend architecture of my app, as well as all the frontend\n            views that it would include. I didn’t have much time for this\n            project, so after my pen-and-paper wireframes were complete, I began\n            developing.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Features and Functionality</header>\n          <article>\n            I implemented Fishhook using Ruby on Rails for the backend and\n            PostgreSQL for the database. This way, I could leverage Rails’s\n            convention-over-configuration philosophy for quick development, and\n            SQL to manage relationships between different entities in my\n            database, such as users, friend requests, and posts. I used Postman\n            to test my backend API before moving on.\n          </article>\n          <article>\n            On the frontend, I leveraged Redux to manage application state, and\n            ReactJS to create a responsive user interface. I employed AJAX to\n            send asynchronous requests to my backend API.\n          </article>\n          <article>\n            Users of Fishhook can search other users and friend-request them. If\n            you want to friend-request a user, you can do so by navigating to\n            their profile page and clicking the “Add Friend” button. Incoming\n            friend requests can be viewed in a dropdown modal. You can accept an\n            incoming friend request, or delete it.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img src={Search} alt=\"Search Screenshot\" className=\"cs-img-small\" />\n          <img\n            src={Requests}\n            alt=\"Requests Modal Screenshot\"\n            className=\"cs-img-small\"\n          />\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            Once you’ve befriended a user, you can see their posts in the “Feed”\n            component of the app. You can also navigate to a user’s profile page\n            and see all the content that they have posted. Similarly, you can\n            view a user’s friends on their profile page by clicking on the\n            “Friends” tab.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img\n            src={UserFeed}\n            alt=\"User Feed Screenshot\"\n            className=\"cs-img-small\"\n          />\n          <img\n            src={Friends}\n            alt=\"Friends Screenshot\"\n            className=\"cs-img-small\"\n          />\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\" >\n        <img src={Feed} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Challenges</header>\n          <article>\n            Developing Fishhook presented me with a variety of challenges as a\n            new developer. The first problem I ran into was how to create\n            “friend-requests” between users, that, when accepted, would\n            associate the users and allow them to see each other's content.\n          </article>\n          <article className=\"cs-bmo\">\n            I got around this by creating a “requests” joins table using Ruby on\n            Rails ORM. The table had columns for the “requester_id”, the\n            “requested_id”, and a boolean status field indicating whether or not\n            the request had been accepted. Users create entries in this table\n            when they issue a friend request. Once the receiving user accepts\n            the request, the status field is updated, and the entry becomes an\n            association between the users.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img src={Create} alt=\"Create snippet\" className=\"cs-img-small\" />\n          <img src={Update} alt=\"Update snippet\" className=\"cs-img-small\" />\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <article>\n            I also ran into difficult bugs in this project, the most frustrating\n            of which was an error in one of my Redux reducers. I had a\n            JavaScript Object storing arrays. When I tried to copy this object\n            into the updated application state, I used Object.assign(), which\n            created a shallow copy, and preserved the object ids of the arrays\n            inside.\n          </article>\n          <article>\n            I spent hours searching for the cause of the unexpected behavior\n            that ensued. Finally, when logging my application state changes with\n            Chrome DevTools, I noticed that the contents of the arrays from\n            previous state changes retroactively updated with each new state\n            change. The “old arrays” would update to have the same contents as\n            the “new arrays”. This pointed me towards the source of the problem,\n            and taught me a valuable lesson about object identity in JavaScript.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Conclusion</header>\n          <article>\n            Fishhook was my first full-stack project at App Academy, and my\n            first real venture into software development. It’s important to note\n            that this project served as an educational experience for me. Not\n            everything about the app is production quality, and there are still\n            plenty of aspects for me to improve upon.\n          </article>\n          <article>\n            I plan to continue to work on Fishhook to improve the user\n            interface, make the layout more responsive to different device\n            sizes, and add the rest of the functionality that I included in the\n            blueprints. All things considered, Fishhook turned out to be an\n            excellent learning experience, and gave me a strong sense of the\n            fundamentals of web development.\n          </article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RipCamp;\n"]},"metadata":{},"sourceType":"module"}