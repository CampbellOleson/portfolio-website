{"ast":null,"code":"var _jsxFileName = \"/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx\";\nimport React from \"react\";\nimport Snippet from \"../../assets/screenshots/ripcamp/rc-findbybounds.png\";\nimport Search from \"../../assets/screenshots/ripcamp/rc-search.png\";\nimport Show from \"../../assets/screenshots/ripcamp/rc-show.png\";\nimport SignUp from \"../../assets/screenshots/ripcamp/rc-signup.png\";\nimport Splash from \"../../assets/screenshots/ripcamp/rc-splash.png\";\nimport Home from \"../../assets/screenshots/ripcamp/rc-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ripcamp.css\";\n\nconst RipCamp = () => {\n  return React.createElement(\"div\", {\n    id: \"ripcamp-wrapper\",\n    className: \"cs-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"cs-topper cs-white-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"cs-topper-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"RipCamp\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Campbell Oleson\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"August 2019\")), React.createElement(\"summary\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"I created a map-based surf locator website that allows users to find surf spots around the globe. RipCamp\\u2019s primary purpose is to connect people with the surf.\"))), React.createElement(\"div\", {\n    id: \"rc-map-img\",\n    className: \"vert-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Splash,\n    alt: \"RipCamp Splash Page\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Assignment\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"During the later portion of my full-stack web development course with App Academy, two other students and I were tasked with designing and creating a full-stack web application. Being surfing enthusiasts, we came up with the idea of RipCamp: a one-stop-shop for planning your day of surfing.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Planning\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Before beginning on RipCamp, my team and I planned out the architecture of the app. We determined that the primary interface would consist of a map and a surf-spots index, allowing users to get information on a surf spots while simultaneously viewing the spots\\u2019 geographical locations on the map. Furthermore, RipCamp would need to include a search feature so users could locate particular spots. Finally, we decided to include a show page for every surf spot, displaying photos of the spot, as well as information about weather and surf conditions.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"I like to make sure that the projects I work on are organized to make sure that there are no conflicts between features. On this project, my team and I used GitHub to manage version control and Trello to divvy out responsibilities.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Features and Functionality\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"We engineered RipCamp with NodeJS on the backend and MongoDB as the database. We chose MongoDB so we could easily store lots of unrelated records with minimal setup.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"We used Redux to manage application state, and designed a responsive user interface using ReactJS. We also integrated Google Maps API for the maps-based interface, Open Weather API for weather conditions, and AWS S3 Bucket for photo hosting.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"RipCamp\\u2019s home page consists of a map-based interface on the right, enabling users to view the geographical location of surf spots, and a list of surf spots on the left, complete with quickshow items that have names, descriptions, and scrolling photos.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"I used JavaScript DOM manipulation here for some cool UI effects. For example, if you hover your mouse over a surf spot on the map, the list will automatically scroll to and highlight the corresponding quickshow. This makes for smooth navigation and easy discovery of surf spots!\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Home,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"If you click on a surf-spot quickshow item from the list, you will be redirected to a surf-spot show page, where you can view photos of the spot and see the local weather conditions.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Show,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"You can also search the name of your favorite surf spot and find its show page, as well as its location on the map. Similarly, you can apply location-based filters to your search, which will recenter the map on a city of your choosing.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Search,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"RipCamp\\u2019s interface uses the boundaries of the map to query the database for surf spots. This allows users to scroll around the map and see surf spots pop up all over the world! The surf-spots index will also change to reflect whatever spots are currently being displayed on the map.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Overall, we produced a fluid map-based UI that allows users to easily navigate the globe and find information about different surf spots. Currently, RipCamp\\u2019s database only has seed data, but once it is populated with real surf-spot information, it will prove useful to surfers everywhere.\")), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: SignUp,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Challenges\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"The biggest development challenge on RipCamp was figuring how to make the surf-spots list display the spots that were currently within the boundaries of the map (and only those spots). While digging through the docs of Google Maps API, I determined that we could use the bounds from the map to query the database for surf spots. I used a JavaScript Regex library to write queries to retrieve all the surf spots with coordinates falling within the range of the bounds.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, \"Conclusion\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"It\\u2019s important to note that this project was for educational purposes. There are still elements that could be improved, and not every feature is production quality. RipCamp will need quite a bit of optimization before it\\u2019s ready for a real user base. Nonetheless, building RipCamp was a great experience, and it taught me a lot about JavaScript DOM manipulation, application state, and integrating external APIs.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"Another conclusion paragraph\"))));\n};\n\nexport default RipCamp;","map":{"version":3,"sources":["/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx"],"names":["React","Snippet","Search","Show","SignUp","Splash","Home","RipCamp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sDAApB;AACA,OAAOC,MAAP,MAAmB,gDAAnB;AACA,OAAOC,IAAP,MAAiB,8CAAjB;AACA,OAAOC,MAAP,MAAmB,gDAAnB;AACA,OAAOC,MAAP,MAAmB,gDAAnB;AACA,OAAOC,IAAP,MAAiB,8CAAjB;AACA,OAAO,iDAAP;AACA,OAAO,4CAAP;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,SACE;AAAK,IAAA,EAAE,EAAC,iBAAR;AAA0B,IAAA,SAAS,EAAC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAS,IAAA,SAAS,EAAC,8BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAC,gBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CAFF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4KANF,CADF,CADF,EAeE;AAAK,IAAA,EAAE,EAAC,YAAR;AAAqB,IAAA,SAAS,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CAFF,EAoBE;AAAK,IAAA,SAAS,EAAC,4CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEF,MAAV;AAAkB,IAAA,GAAG,EAAC,qBAAtB;AAA4C,IAAA,SAAS,EAAC,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CApBF,EAwBE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2SAFF,CADF,CAxBF,EAqCE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kjBAFF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+OAdF,CADF,CArCF,EA6DE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6KAFF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yPAPF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yQAbF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+RAnBF,CADF,CA7DF,EA2FE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEC,IAAV;AAAgB,IAAA,GAAG,EAAC,iBAApB;AAAsC,IAAA,SAAS,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA3FF,EA+FE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8LADF,CADF,CA/FF,EAyGE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEH,IAAV;AAAgB,IAAA,GAAG,EAAC,iBAApB;AAAsC,IAAA,SAAS,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzGF,EA6GE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mPADF,CADF,CA7GF,EAwHE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAED,MAAV;AAAkB,IAAA,GAAG,EAAC,iBAAtB;AAAwC,IAAA,SAAS,EAAC,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAxHF,EA4HE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wSADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8SARF,CADF,EAiBE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEE,MAAV;AAAkB,IAAA,GAAG,EAAC,iBAAtB;AAAwC,IAAA,SAAS,EAAC,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAjBF,CA5HF,EAkLE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2dAFF,CADF,CAlLF,EAyME;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8aAFF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAXF,CADF,CAzMF,CADF;AA2ND,CA5ND;;AA8NA,eAAeG,OAAf","sourcesContent":["import React from \"react\";\nimport Snippet from \"../../assets/screenshots/ripcamp/rc-findbybounds.png\";\nimport Search from \"../../assets/screenshots/ripcamp/rc-search.png\";\nimport Show from \"../../assets/screenshots/ripcamp/rc-show.png\";\nimport SignUp from \"../../assets/screenshots/ripcamp/rc-signup.png\";\nimport Splash from \"../../assets/screenshots/ripcamp/rc-splash.png\";\nimport Home from \"../../assets/screenshots/ripcamp/rc-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ripcamp.css\";\n\nconst RipCamp = () => {\n  return (\n    <div id=\"ripcamp-wrapper\" className=\"cs-wrapper\">\n      <div className=\"cs-nav\" />\n      <section className=\"cs-topper cs-white-container\">\n        <div className=\"vert-center\">\n          <section className=\"cs-topper-info\">\n            <header>RipCamp</header>\n            <div>\n              <p>Campbell Oleson</p>\n              <p>August 2019</p>\n            </div>\n            <summary>\n              I created a map-based surf locator website that allows users to\n              find surf spots around the globe. RipCamp’s primary purpose is to\n              connect people with the surf.\n            </summary>\n          </section>\n        </div>\n        <div id=\"rc-map-img\" className=\"vert-bottom\" />\n      </section>\n\n      <div className=\"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\">\n        <img src={Splash} alt=\"RipCamp Splash Page\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Assignment</header>\n          <article>\n            During the later portion of my full-stack web development course\n            with App Academy, two other students and I were tasked with\n            designing and creating a full-stack web application. Being surfing\n            enthusiasts, we came up with the idea of RipCamp: a one-stop-shop\n            for planning your day of surfing.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Planning</header>\n          <article>\n            Before beginning on RipCamp, my team and I planned out the\n            architecture of the app. We determined that the primary interface\n            would consist of a map and a surf-spots index, allowing users to get\n            information on a surf spots while simultaneously viewing the spots’\n            geographical locations on the map. Furthermore, RipCamp would need\n            to include a search feature so users could locate particular spots.\n            Finally, we decided to include a show page for every surf spot,\n            displaying photos of the spot, as well as information about weather\n            and surf conditions.\n          </article>\n\n          <article>\n            I like to make sure that the projects I work on are organized to\n            make sure that there are no conflicts between features. On this\n            project, my team and I used GitHub to manage version control and\n            Trello to divvy out responsibilities.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Features and Functionality</header>\n          <article>\n            We engineered RipCamp with NodeJS on the backend and MongoDB as the\n            database. We chose MongoDB so we could easily store lots of\n            unrelated records with minimal setup.\n          </article>\n          <article>\n            We used Redux to manage application state, and designed a responsive\n            user interface using ReactJS. We also integrated Google Maps API for\n            the maps-based interface, Open Weather API for weather conditions,\n            and AWS S3 Bucket for photo hosting.\n          </article>\n          <article>\n            RipCamp’s home page consists of a map-based interface on the right,\n            enabling users to view the geographical location of surf spots, and\n            a list of surf spots on the left, complete with quickshow items that\n            have names, descriptions, and scrolling photos.\n          </article>\n          <article>\n            I used JavaScript DOM manipulation here for some cool UI effects.\n            For example, if you hover your mouse over a surf spot on the map,\n            the list will automatically scroll to and highlight the\n            corresponding quickshow. This makes for smooth navigation and easy\n            discovery of surf spots!\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Home} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            If you click on a surf-spot quickshow item from the list, you will\n            be redirected to a surf-spot show page, where you can view photos of\n            the spot and see the local weather conditions.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Show} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            You can also search the name of your favorite surf spot and find its\n            show page, as well as its location on the map. Similarly, you can\n            apply location-based filters to your search, which will recenter the\n            map on a city of your choosing.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Search} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article>\n            RipCamp’s interface uses the boundaries of the map to query the\n            database for surf spots. This allows users to scroll around the map\n            and see surf spots pop up all over the world! The surf-spots index\n            will also change to reflect whatever spots are currently being\n            displayed on the map.\n          </article>\n          <article>\n            Overall, we produced a fluid map-based UI that allows users to\n            easily navigate the globe and find information about different surf\n            spots. Currently, RipCamp’s database only has seed data, but once it\n            is populated with real surf-spot information, it will prove useful\n            to surfers everywhere.\n          </article>\n        </div>\n        <div className=\"hor-center\">\n          <div className=\"cs-img-wrapper cs-img-margin\">\n            <img src={SignUp} alt=\"Feed Screenshot\" className=\"cs-img\" />\n          </div>\n        </div>\n      </div>\n\n      {/* <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img src={Search} alt=\"Search Screenshot\" className=\"cs-img-small\" />\n          <img\n            src={Requests}\n            alt=\"Requests Modal Screenshot\"\n            className=\"cs-img-small\"\n          />\n        </div>\n      </div> */}\n\n      {/* <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img\n            src={UserFeed}\n            alt=\"User Feed Screenshot\"\n            className=\"cs-img-small\"\n          />\n          <img\n            src={Friends}\n            alt=\"Friends Screenshot\"\n            className=\"cs-img-small\"\n          />\n        </div>\n      </div> */}\n\n      {/* <div className=\"cs-img-wrapper cs-img-margin\" >\n        <img src={Feed} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div> */}\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Challenges</header>\n          <article>\n            The biggest development challenge on RipCamp was figuring how to\n            make the surf-spots list display the spots that were currently\n            within the boundaries of the map (and only those spots). While\n            digging through the docs of Google Maps API, I determined that we\n            could use the bounds from the map to query the database for surf\n            spots. I used a JavaScript Regex library to write queries to\n            retrieve all the surf spots with coordinates falling within the\n            range of the bounds.\n          </article>\n        </div>\n      </div>\n      {/* \n      <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img src={Create} alt=\"Create snippet\" className=\"cs-img-small\" />\n          <img src={Update} alt=\"Update snippet\" className=\"cs-img-small\" />\n        </div>\n      </div> */}\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Conclusion</header>\n          <article>\n            It’s important to note that this project was for educational\n            purposes. There are still elements that could be improved, and not\n            every feature is production quality. RipCamp will need quite a bit\n            of optimization before it’s ready for a real user base. Nonetheless,\n            building RipCamp was a great experience, and it taught me a lot\n            about JavaScript DOM manipulation, application state, and\n            integrating external APIs.\n          </article>\n          <article>Another conclusion paragraph</article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RipCamp;\n"]},"metadata":{},"sourceType":"module"}