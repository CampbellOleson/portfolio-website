{"ast":null,"code":"var _jsxFileName = \"/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx\";\nimport React from \"react\";\nimport Snippet from \"../../assets/screenshots/ripcamp/rc-findbybounds.png\";\nimport Search from \"../../assets/screenshots/ripcamp/rc-search.png\";\nimport Show from \"../../assets/screenshots/ripcamp/rc-show.png\";\nimport SignUp from \"../../assets/screenshots/ripcamp/rc-signup.png\";\nimport Splash from \"../../assets/screenshots/ripcamp/rc-splash.png\";\nimport Home from \"../../assets/screenshots/ripcamp/rc-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ripcamp.css\";\n\nconst RipCamp = () => {\n  return React.createElement(\"div\", {\n    id: \"ripcamp-wrapper\",\n    className: \"cs-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"cs-topper cs-white-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"cs-topper-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"RipCamp\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Campbell Oleson\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"August 2019\")), React.createElement(\"summary\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"I created a map-based surf locator website that allows users to find information on surf spots. RipCamp\\u2019s main purpose is to provide users with an intuitive, easy-to-use way to discover and explore new surf spots around the globe.\"))), React.createElement(\"div\", {\n    className: \"vert-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"rc-map-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Splash,\n    alt: \"RipCamp Splash Page\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Assignment\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"During my software development course with App Academy, I was put in a team with two other students, and tasked with creating a full-stack web application. The purpose and implementation details of the website were up to us. My teammates and I were all surfing enthusiasts, so we came up with the idea of RipCamp: a one-stop-shop for planning your day of surfing.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Planning\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Before we started architecting and designing RipCamp, we discussed the functionality that our website would include. We determined that the primary interface would consist of a map displaying the spots\\u2019 locations, and a list of quickshow items, allowing users to view specific information on each spot. Furthermore, we decided to include a search feature so users could locate particular spots. Finally, we decided to include a show page for every surf spot, displaying photos of the spot, as well as information about weather and surf conditions.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"My team and I wanted to make sure that our project stayed organized, so we used GitHub to manage version control. Before anyone merged a branch, we would come together and test the new feature to make sure that it integrated seamlessly with everything else. I also set up a Trello board to help my team divide and organize responsibilities for this project.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Features and Functionality\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"We built RipCamp with NodeJS on the backend and MongoDB as the database. We chose MongoDB so we could easily store lots of unrelated records with minimal setup.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"We leveraged Redux to manage application state, and designed a responsive user interface with ReactJS. We also integrated Google Maps API for the map-based interface, Open Weather API for weather information, and AWS S3 Bucket for photo hosting.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"On the left hand side of RipCamp\\u2019s primary interface is the surf spots-index, complete with quickshow items that have names, descriptions, and scrolling photos. On the right hand side is the map, with surf-green pointers for the geographical location of each surf spot. The surf-spots index only displays the spots that are currently shown on the map. If you move the map around, the index will be updated in real time to display the surf spots that are within the map\\u2019s bounds.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"I used JavaScript DOM manipulation to give this interface some eye-catching UI effects. If you hover your mouse over a surf spot on the map, the surf-spots index will automatically scroll to and highlight the corresponding quickshow item! This makes for smooth navigation and easy discovery of new surf spots.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Home,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"When a user clicks on a surf-spot quickshow item from the surf-spots index, they are redirected to a show page that displays local weather conditions and photos of the surf spot.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Show,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"You can also search the name of your favorite surf spot and find its show page, as well as its location on the map. Similarly, you can apply location-based filters to your search, which will recenter the map on a city of your choosing.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Search,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"RipCamp\\u2019s interface uses the boundaries of the map to query the database for surf spots. This allows users to scroll around the map and see surf spots pop up all over the world! The surf-spots index will also change to reflect whatever spots are currently being displayed on the map.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Overall, we produced a fluid map-based UI that allows users to easily navigate the globe and find information about different surf spots. Currently, RipCamp\\u2019s database only has seed data, but once it is populated with real surf-spot information, it will prove useful to surfers everywhere.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: SignUp,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Challenges\"), React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"The biggest development challenge on RipCamp was figuring how to make the surf-spots list display the spots that were currently within the boundaries of the map (and only those spots). While digging through the docs of Google Maps API, I determined that we could use the bounds from the map to query the database for surf spots. I used a JavaScript Regex library to write queries to retrieve all the surf spots with coordinates falling within the range of the bounds.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Snippet,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Conclusion\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"It\\u2019s important to note that this project was for educational purposes. There are still elements that could be improved, and not every feature is production quality. RipCamp will need quite a bit of optimization before it\\u2019s ready for a real user base. Nonetheless, building RipCamp was a great experience, and it taught me a lot about JavaScript DOM manipulation, application state, and integrating external APIs.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Another conclusion paragraph\"))));\n};\n\nexport default RipCamp;","map":{"version":3,"sources":["/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx"],"names":["React","Snippet","Search","Show","SignUp","Splash","Home","RipCamp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Snippet from \"../../assets/screenshots/ripcamp/rc-findbybounds.png\";\nimport Search from \"../../assets/screenshots/ripcamp/rc-search.png\";\nimport Show from \"../../assets/screenshots/ripcamp/rc-show.png\";\nimport SignUp from \"../../assets/screenshots/ripcamp/rc-signup.png\";\nimport Splash from \"../../assets/screenshots/ripcamp/rc-splash.png\";\nimport Home from \"../../assets/screenshots/ripcamp/rc-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ripcamp.css\";\n\nconst RipCamp = () => {\n  return (\n    <div id=\"ripcamp-wrapper\" className=\"cs-wrapper\">\n      <div className=\"cs-nav\" />\n      <section className=\"cs-topper cs-white-container\">\n        <div className=\"vert-center\">\n          <section className=\"cs-topper-info\">\n            <header>RipCamp</header>\n            <div>\n              <p>Campbell Oleson</p>\n              <p>August 2019</p>\n            </div>\n            <summary>\n              I created a map-based surf locator website that allows users to\n              find information on surf spots. RipCamp’s main purpose is to\n              provide users with an intuitive, easy-to-use way to discover and\n              explore new surf spots around the globe.\n            </summary>\n          </section>\n        </div>\n        <div className=\"vert-bottom\">\n          <div id=\"rc-map-img\" />\n        </div>\n      </section>\n\n      <div className=\"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\">\n        <img src={Splash} alt=\"RipCamp Splash Page\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Assignment</header>\n          <article>\n            During my software development course with App Academy, I was put in\n            a team with two other students, and tasked with creating a\n            full-stack web application. The purpose and implementation details\n            of the website were up to us. My teammates and I were all surfing\n            enthusiasts, so we came up with the idea of RipCamp: a one-stop-shop\n            for planning your day of surfing.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Planning</header>\n          <article>\n            Before we started architecting and designing RipCamp, we discussed\n            the functionality that our website would include. We determined that\n            the primary interface would consist of a map displaying the spots’\n            locations, and a list of quickshow items, allowing users to view\n            specific information on each spot. Furthermore, we decided to\n            include a search feature so users could locate particular spots.\n            Finally, we decided to include a show page for every surf spot,\n            displaying photos of the spot, as well as information about weather\n            and surf conditions.\n          </article>\n\n          <article>\n            My team and I wanted to make sure that our project stayed organized,\n            so we used GitHub to manage version control. Before anyone merged a\n            branch, we would come together and test the new feature to make sure\n            that it integrated seamlessly with everything else. I also set up a\n            Trello board to help my team divide and organize responsibilities\n            for this project.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Features and Functionality</header>\n          <article>\n            We built RipCamp with NodeJS on the backend and MongoDB as the\n            database. We chose MongoDB so we could easily store lots of\n            unrelated records with minimal setup.\n          </article>\n          <article>\n            We leveraged Redux to manage application state, and designed a\n            responsive user interface with ReactJS. We also integrated Google\n            Maps API for the map-based interface, Open Weather API for weather\n            information, and AWS S3 Bucket for photo hosting.\n          </article>\n          <article>\n            On the left hand side of RipCamp’s primary interface is the surf\n            spots-index, complete with quickshow items that have names,\n            descriptions, and scrolling photos. On the right hand side is the\n            map, with surf-green pointers for the geographical location of each\n            surf spot. The surf-spots index only displays the spots that are\n            currently shown on the map. If you move the map around, the index\n            will be updated in real time to display the surf spots that are\n            within the map’s bounds.\n          </article>\n          <article>\n            I used JavaScript DOM manipulation to give this interface some\n            eye-catching UI effects. If you hover your mouse over a surf spot on\n            the map, the surf-spots index will automatically scroll to and\n            highlight the corresponding quickshow item! This makes for smooth\n            navigation and easy discovery of new surf spots.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Home} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            When a user clicks on a surf-spot quickshow item from the surf-spots\n            index, they are redirected to a show page that displays local\n            weather conditions and photos of the surf spot.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Show} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            You can also search the name of your favorite surf spot and find its\n            show page, as well as its location on the map. Similarly, you can\n            apply location-based filters to your search, which will recenter the\n            map on a city of your choosing.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Search} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article>\n            RipCamp’s interface uses the boundaries of the map to query the\n            database for surf spots. This allows users to scroll around the map\n            and see surf spots pop up all over the world! The surf-spots index\n            will also change to reflect whatever spots are currently being\n            displayed on the map.\n          </article>\n          <article>\n            Overall, we produced a fluid map-based UI that allows users to\n            easily navigate the globe and find information about different surf\n            spots. Currently, RipCamp’s database only has seed data, but once it\n            is populated with real surf-spot information, it will prove useful\n            to surfers everywhere.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-img-wrapper cs-img-margin\">\n          <img src={SignUp} alt=\"Feed Screenshot\" className=\"cs-img-small\" />\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Challenges</header>\n          <article className=\"cs-bmo\">\n            The biggest development challenge on RipCamp was figuring how to\n            make the surf-spots list display the spots that were currently\n            within the boundaries of the map (and only those spots). While\n            digging through the docs of Google Maps API, I determined that we\n            could use the bounds from the map to query the database for surf\n            spots. I used a JavaScript Regex library to write queries to\n            retrieve all the surf spots with coordinates falling within the\n            range of the bounds.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-img-wrapper cs-img-margin\">\n          <img src={Snippet} alt=\"Feed Screenshot\" className=\"cs-img-small\" />\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Conclusion</header>\n          <article>\n            It’s important to note that this project was for educational\n            purposes. There are still elements that could be improved, and not\n            every feature is production quality. RipCamp will need quite a bit\n            of optimization before it’s ready for a real user base. Nonetheless,\n            building RipCamp was a great experience, and it taught me a lot\n            about JavaScript DOM manipulation, application state, and\n            integrating external APIs.\n          </article>\n          <article>Another conclusion paragraph</article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RipCamp;\n"]},"metadata":{},"sourceType":"module"}