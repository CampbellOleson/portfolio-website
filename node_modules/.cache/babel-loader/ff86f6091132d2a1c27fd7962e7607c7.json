{"ast":null,"code":"var _jsxFileName = \"/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/AmpCamp.jsx\";\nimport React from \"react\";\nimport Choose from \"../../assets/screenshots/ampcamp/ac-choose.png\";\nimport AlbumShow from \"../../assets/screenshots/ampcamp/ac-albumshow.png\";\nimport Profile from \"../../assets/screenshots/ampcamp/ac-profile.png\";\nimport Search from \"../../assets/screenshots/ampcamp/ac-search.png\";\nimport SignUp from \"../../assets/screenshots/ampcamp/ac-signup.png\";\nimport Upload from \"../../assets/screenshots/ampcamp/ac-upload.png\";\nimport Home from \"../../assets/screenshots/ampcamp/ac-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ampcamp.css\";\n\nconst AmpCamp = () => {\n  return React.createElement(\"div\", {\n    id: \"ampcamp-wrapper\",\n    className: \"cs-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"cs-topper cs-white-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"cs-topper-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"AmpCamp\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Campbell Oleson\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"September 2019\")), React.createElement(\"summary\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"I created a heavy-metal themed music streaming site. AmpCamp serves as a platform where musicians can share their music, and listeners can discover new artists.\"))), React.createElement(\"div\", {\n    className: \"vert-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"ac-topper-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Home,\n    alt: \"AmpCamp Home Page\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Assignment\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"AmpCamp is a full-stack web application that I created as a project at App Academy. I worked on AmpCamp with a team of two other students. We used GitHub for source code management.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"As our final project with App Academy, my team wanted to take on a sophisticated project. We chose to create a music streaming site because we wanted something with functionality that goes beyond that of an every-day website. Our idea for the site was a platform where artists could share their music, complete with artist profiles, profile photos, and album uploading capability.\", \" \"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Planning\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"In AmpCamp, my team tried to emulate the core functionality of band camp. We decided that the home page should be a place where users could discover music, complete with \\u201Cdaily albums\\u201D and search functionality.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"We also determined that our site should be easy-to-use for artists, with functionality to seamlessly upload entire albums at a time. We determined that artists should have profile pages where all their albums and songs could be viewed and listened to. This meant that we also had to integrate audio-player functionality into our app.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Like my other projects at App Academy, AmpCamp is not a production-quality website. It was an opportunity for me and my teammates to learn about more sophisticated facets of web development. That being said, we built a lot of functionality into AmpCamp, and I stand behind all of our work.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Features and Functionality\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"AmpCamp was implemented with NodeJS and MongoDB on the backend. We used the ExpressJS library for our backend server, and tested our API with Postman during development.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"On the front end, we leveraged React for the UI and Apollo GraphQL for requests to our backend API. AmpCamp also integrates AWS SW Bucket for hosting photos and audio files.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"The homepage of AmpCamp enables users to discover new music via \\u201CAmpCamp Daily Picks\\u201D, and search for artists, albums, and songs. A play/pause button on the homepage album index items allows users to listen to albums on the home page.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"If you navigate to an artists profile page, you can view all of the albums and songs that an artist has released. Similarly, there is an album show page that allows you to view the details of a particular album. You can stream music on an artists profile page, and a fixed music-player nav bar on the bottom of the page will display the name of the song that\\u2019s playing, the album artwork, and the artist that the song belongs to.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"I was responsible for creating the upload functionality of AmpCamp. If you sign up to AmpCamp as an artist, you can upload as many songs as you want as an album, complete with a description and a cover art. I used React to create a live preview of the album information, so an artist can look over the details of their album before uploading. This page asynchronously uploads audio files to AWS S3 Bucket, and then stores the URLs in MongoDB so the tracks can be played back later.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"AmpCamp has fully functional upload and streaming capabilities, complete with a fluid and intuitive user interface.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"Challenges\"), React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"One of the challenges I faced when creating the album upload page on AmpCamp was asynchronous exception handling. Occasionally, albums would fail to upload to S3 part of the way through, leaving the artist with a semi-uploaded album. The way I got around this was to have the app stay on the upload page until the upload was complete, afterwhich, it would redirect to the new album show page. If the upload failed, the local state of the upload page would be preserved (so the user didn\\u2019t have to recreate the album) and a user-friendly error message would prompt the user to \\u201Ctry again in a moment\\u201D. This taught me the importance of good error handling as it pertains to user experience.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Conclusion\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"The result of our work was a fully functional indie streaming site, with upload and download functionality. I plan to optimize AmpCamp further as time goes on, and I hope to make the audio player compatible with mobile devices as well. All in all, AmpCamp was a great learning experience, and it taught me how to create bigger web apps with more complex functionality.\"))));\n};\n\nexport default AmpCamp;","map":{"version":3,"sources":["/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/AmpCamp.jsx"],"names":["React","Choose","AlbumShow","Profile","Search","SignUp","Upload","Home","AmpCamp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Choose from \"../../assets/screenshots/ampcamp/ac-choose.png\";\nimport AlbumShow from \"../../assets/screenshots/ampcamp/ac-albumshow.png\";\nimport Profile from \"../../assets/screenshots/ampcamp/ac-profile.png\";\nimport Search from \"../../assets/screenshots/ampcamp/ac-search.png\";\nimport SignUp from \"../../assets/screenshots/ampcamp/ac-signup.png\";\nimport Upload from \"../../assets/screenshots/ampcamp/ac-upload.png\";\nimport Home from \"../../assets/screenshots/ampcamp/ac-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ampcamp.css\";\n\nconst AmpCamp = () => {\n  return (\n    <div id=\"ampcamp-wrapper\" className=\"cs-wrapper\">\n      <div className=\"cs-nav\" />\n      <section className=\"cs-topper cs-white-container\">\n        <div className=\"vert-center\">\n          <section className=\"cs-topper-info\">\n            <header>AmpCamp</header>\n            <div>\n              <p>Campbell Oleson</p>\n              <p>September 2019</p>\n            </div>\n            <summary>\n              I created a heavy-metal themed music streaming site. AmpCamp\n              serves as a platform where musicians can share their music, and\n              listeners can discover new artists.\n            </summary>\n          </section>\n        </div>\n        <div className=\"vert-bottom\">\n          <div id=\"ac-topper-img\" />\n        </div>\n      </section>\n\n      <div className=\"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\">\n        <img src={Home} alt=\"AmpCamp Home Page\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Assignment</header>\n          <article>\n            AmpCamp is a full-stack web application that I created as a project\n            at App Academy. I worked on AmpCamp with a team of two other\n            students. We used GitHub for source code management.\n          </article>\n          <article>\n            As our final project with App Academy, my team wanted to take on a\n            sophisticated project. We chose to create a music streaming site\n            because we wanted something with functionality that goes beyond that\n            of an every-day website. Our idea for the site was a platform where\n            artists could share their music, complete with artist profiles,\n            profile photos, and album uploading capability.{\" \"}\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Planning</header>\n          <article>\n            In AmpCamp, my team tried to emulate the core functionality of band\n            camp. We decided that the home page should be a place where users\n            could discover music, complete with “daily albums” and search\n            functionality.\n          </article>\n          <article>\n            We also determined that our site should be easy-to-use for artists,\n            with functionality to seamlessly upload entire albums at a time. We\n            determined that artists should have profile pages where all their\n            albums and songs could be viewed and listened to. This meant that we\n            also had to integrate audio-player functionality into our app.\n          </article>\n          <article>\n            Like my other projects at App Academy, AmpCamp is not a\n            production-quality website. It was an opportunity for me and my\n            teammates to learn about more sophisticated facets of web\n            development. That being said, we built a lot of functionality into\n            AmpCamp, and I stand behind all of our work.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Features and Functionality</header>\n          <article>\n            AmpCamp was implemented with NodeJS and MongoDB on the backend. We\n            used the ExpressJS library for our backend server, and tested our\n            API with Postman during development.\n          </article>\n          <article>\n            On the front end, we leveraged React for the UI and Apollo GraphQL\n            for requests to our backend API. AmpCamp also integrates AWS SW\n            Bucket for hosting photos and audio files.\n          </article>\n          <article>\n            The homepage of AmpCamp enables users to discover new music via\n            “AmpCamp Daily Picks”, and search for artists, albums, and songs. A\n            play/pause button on the homepage album index items allows users to\n            listen to albums on the home page.\n          </article>\n          <article>\n            If you navigate to an artists profile page, you can view all of the\n            albums and songs that an artist has released. Similarly, there is an\n            album show page that allows you to view the details of a particular\n            album. You can stream music on an artists profile page, and a fixed\n            music-player nav bar on the bottom of the page will display the name\n            of the song that’s playing, the album artwork, and the artist that\n            the song belongs to.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article>\n            I was responsible for creating the upload functionality of AmpCamp.\n            If you sign up to AmpCamp as an artist, you can upload as many songs\n            as you want as an album, complete with a description and a cover\n            art. I used React to create a live preview of the album information,\n            so an artist can look over the details of their album before\n            uploading. This page asynchronously uploads audio files to AWS S3\n            Bucket, and then stores the URLs in MongoDB so the tracks can be\n            played back later.\n          </article>\n          <article>\n            AmpCamp has fully functional upload and streaming capabilities,\n            complete with a fluid and intuitive user interface.\n          </article>\n        </div>\n      </div>\n\n      {/* \n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Home} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div> */}\n\n      {/* <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Show} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div> */}\n\n      {/* <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Search} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div> */}\n\n      {/* <div className=\"hor-center\">\n        <div className=\"cs-img-wrapper cs-img-margin\">\n          <img src={SignUp} alt=\"Feed Screenshot\" className=\"cs-img-small\" />\n        </div>\n      </div> */}\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Challenges</header>\n          <article className=\"cs-bmo\">\n            One of the challenges I faced when creating the album upload page on\n            AmpCamp was asynchronous exception handling. Occasionally, albums\n            would fail to upload to S3 part of the way through, leaving the\n            artist with a semi-uploaded album. The way I got around this was to\n            have the app stay on the upload page until the upload was complete,\n            afterwhich, it would redirect to the new album show page. If the\n            upload failed, the local state of the upload page would be preserved\n            (so the user didn’t have to recreate the album) and a user-friendly\n            error message would prompt the user to “try again in a moment”. This\n            taught me the importance of good error handling as it pertains to\n            user experience.\n          </article>\n        </div>\n      </div>\n\n      {/* <div className=\"hor-center\">\n        <div className=\"cs-img-wrapper cs-img-margin\">\n          <img src={Snippet} alt=\"Feed Screenshot\" className=\"cs-img-small\" />\n        </div>\n      </div> */}\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Conclusion</header>\n          <article>\n            The result of our work was a fully functional indie streaming site,\n            with upload and download functionality. I plan to optimize AmpCamp\n            further as time goes on, and I hope to make the audio player\n            compatible with mobile devices as well. All in all, AmpCamp was a\n            great learning experience, and it taught me how to create bigger web\n            apps with more complex functionality.\n          </article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AmpCamp;\n"]},"metadata":{},"sourceType":"module"}