{"ast":null,"code":"var _jsxFileName = \"/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx\";\nimport React from \"react\";\nimport FindByBounds from \"../../assets/screenshots/ripcamp/rc-findbybounds.png\";\nimport GetSurfSpots from \"../../assets/screenshots/ripcamp/rc-getsurfspots.png\";\nimport Search from \"../../assets/screenshots/ripcamp/rc-search.png\";\nimport Show from \"../../assets/screenshots/ripcamp/rc-show.png\";\nimport SignUp from \"../../assets/screenshots/ripcamp/rc-signup.png\";\nimport Splash from \"../../assets/screenshots/ripcamp/rc-splash.png\";\nimport Home from \"../../assets/screenshots/ripcamp/rc-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ripcamp.css\";\n\nconst RipCamp = () => {\n  return React.createElement(\"div\", {\n    id: \"ripcamp-wrapper\",\n    className: \"cs-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"cs-topper cs-white-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-links\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"https://ripcamp.herokuapp.com/#/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Live\"), \"|\", React.createElement(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"GitHub\")), React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"cs-topper-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"RipCamp\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Campbell Oleson\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"August 2019\")), React.createElement(\"summary\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"I created a map-based surf locator website that allows users to find information on surf spots. RipCamp\\u2019s main purpose is to provide users with an intuitive, easy-to-use way to discover and explore new surf spots around the globe.\"))), React.createElement(\"div\", {\n    className: \"vert-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"rc-map-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Splash,\n    alt: \"RipCamp Splash Page\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Assignment\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"During my software development course with App Academy, I was put in a team with two other students, and tasked with creating a full-stack web application. The purpose and implementation details of the website were up to us. My teammates and I were all surfing enthusiasts, so we came up with the idea of RipCamp: a one-stop-shop for planning your day of surfing.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Planning\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Before we started architecting and designing RipCamp, we discussed the functionality that our website would include. We determined that the primary interface would consist of a map displaying the spots\\u2019 locations, and a list of quickshow items, allowing users to view specific information on each spot. Furthermore, we decided to include a search feature so users could locate particular spots. Finally, we decided to include a show page for every surf spot, displaying photos of the spot, as well as information about weather and surf conditions.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"My team and I wanted to make sure that our project stayed organized, so we used GitHub to manage version control. Before anyone merged a branch, we would come together and test the new feature to make sure that it integrated seamlessly with everything else. I also set up a Trello board to help my team divide and organize responsibilities for this project.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Features and Functionality\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"We built RipCamp with NodeJS on the backend and MongoDB as the database. We chose MongoDB so we could easily store lots of unrelated records with minimal setup.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"We leveraged Redux to manage application state, and designed a responsive user interface with ReactJS. We also integrated Google Maps API for the map-based interface, Open Weather API for weather information, and AWS S3 Bucket for photo hosting.\"), React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"On the left hand side of RipCamp\\u2019s primary interface is the surf spots-index, complete with quickshow items that have names, descriptions, and scrolling photos. On the right hand side is the map, with surf-green pointers for the geographical location of each surf spot. The surf-spots index only displays the spots that are currently shown on the map. If you move the map around, the index will be updated in real time to display the surf spots that are within the map\\u2019s bounds.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Home,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"I used JavaScript DOM manipulation to give this interface some eye-catching UI effects. If you hover your mouse over a surf spot on the map, the surf-spots index will automatically scroll to and highlight the corresponding quickshow item! This makes for smooth navigation and easy discovery of new surf spots.\"), React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"When a user clicks on a surf-spot quickshow item from the surf-spots index, they are redirected to a show page that displays local weather conditions and photos of the surf spot.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Show,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Users can search for a surf spot by name and find its show page, as well as its location on the map. Similarly, users can apply location-based filters to the search, which will recenter the map on the city that they choose.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Search,\n    alt: \"Search Screenshot\",\n    className: \"cs-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: SignUp,\n    alt: \"Signup Screenshot\",\n    className: \"cs-img-small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Challenges\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"The biggest development challenge on RipCamp was figuring how to query the database and update the application state in such a way that the surf-spots index always displays the surf spots on the map.\"), React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"The first few approaches to this problem that I came up with were roundabout and impractical, but I knew that there had to be a straightforward solution. Then, while looking through the docs of Google Maps API I realized that the Map object provides the latitude/longitude coordinates of each corner of the map. Using the northeast and southwest corners, I wrote a query to return all of the spots with coordinates within these ranges.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: FindByBounds,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img-medium\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"Once I had my API serving up surf spots based on the map\\u2019s boundaries, I wrote Redux actions to modify my application state each time a new batch of surf spots comes in. After every \\u201Cmap rest\\u201D event (which is fired when you stop moving the map around), the application state clears out the surf spots that were previously displayed. Then, the frontend client requests more surf spots from my API, passing over the new bounds. Finally, the application state and frontend components are updated with the new data.\"))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: GetSurfSpots,\n    alt: \"Feed Screenshot\",\n    className: \"cs-img-medium\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"I ran into a few quirks with my boundaries-based query system. For example, if the map was centered over the prime meridian, the query wouldn\\u2019t return any surf spots, because the underlying logic would look for spots greater than the westmost longitude (somewhere around +180\\xB0) and less than the eastmost longitude (somewhere around -180\\xB0). Fortunately, there are no surf spots on the prime meridian, and I realized that by slightly zooming the map window I could ensure that the prime meridian is never on the map while a surf spot is on the map. This prevents the prime meridian from breaking my query and goes to show that sometimes complicated problems have simple solutions.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, \"Outcome\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"The result of our work was a beautifully designed application with a responsive user interface, and a nuanced query system that integrated seamlessly with the architecture of our application state. These features culminated to empower users with an intuitive new way of discovering surf spots.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"Furthermore, this project was an invaluable learning experience for me. It taught me how to work with Google Maps API, how to design more responsive and visually interesting user interfaces, and how to engineer sophisticated systems for managing application state.\"))));\n};\n\nexport default RipCamp;","map":{"version":3,"sources":["/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx"],"names":["React","FindByBounds","GetSurfSpots","Search","Show","SignUp","Splash","Home","RipCamp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport FindByBounds from \"../../assets/screenshots/ripcamp/rc-findbybounds.png\";\nimport GetSurfSpots from \"../../assets/screenshots/ripcamp/rc-getsurfspots.png\";\nimport Search from \"../../assets/screenshots/ripcamp/rc-search.png\";\nimport Show from \"../../assets/screenshots/ripcamp/rc-show.png\";\nimport SignUp from \"../../assets/screenshots/ripcamp/rc-signup.png\";\nimport Splash from \"../../assets/screenshots/ripcamp/rc-splash.png\";\nimport Home from \"../../assets/screenshots/ripcamp/rc-home.png\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\nimport \"../../stylesheets/case-studies/ripcamp.css\";\n\nconst RipCamp = () => {\n  return (\n    <div id=\"ripcamp-wrapper\" className=\"cs-wrapper\">\n      <div className=\"cs-nav\" />\n      <section className=\"cs-topper cs-white-container\">\n        <div className=\"cs-links\">\n          <a href=\"https://ripcamp.herokuapp.com/#/\">Live</a>|<a>GitHub</a>\n        </div>\n        <div className=\"vert-center\">\n          <section className=\"cs-topper-info\">\n            <header>RipCamp</header>\n            <div>\n              <p>Campbell Oleson</p>\n              <p>August 2019</p>\n            </div>\n            <summary>\n              I created a map-based surf locator website that allows users to\n              find information on surf spots. RipCamp’s main purpose is to\n              provide users with an intuitive, easy-to-use way to discover and\n              explore new surf spots around the globe.\n            </summary>\n          </section>\n        </div>\n        <div className=\"vert-bottom\">\n          <div id=\"rc-map-img\" />\n        </div>\n      </section>\n\n      <div className=\"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\">\n        <img src={Splash} alt=\"RipCamp Splash Page\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Assignment</header>\n          <article>\n            During my software development course with App Academy, I was put in\n            a team with two other students, and tasked with creating a\n            full-stack web application. The purpose and implementation details\n            of the website were up to us. My teammates and I were all surfing\n            enthusiasts, so we came up with the idea of RipCamp: a one-stop-shop\n            for planning your day of surfing.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Planning</header>\n          <article>\n            Before we started architecting and designing RipCamp, we discussed\n            the functionality that our website would include. We determined that\n            the primary interface would consist of a map displaying the spots’\n            locations, and a list of quickshow items, allowing users to view\n            specific information on each spot. Furthermore, we decided to\n            include a search feature so users could locate particular spots.\n            Finally, we decided to include a show page for every surf spot,\n            displaying photos of the spot, as well as information about weather\n            and surf conditions.\n          </article>\n          <article>\n            My team and I wanted to make sure that our project stayed organized,\n            so we used GitHub to manage version control. Before anyone merged a\n            branch, we would come together and test the new feature to make sure\n            that it integrated seamlessly with everything else. I also set up a\n            Trello board to help my team divide and organize responsibilities\n            for this project.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Features and Functionality</header>\n          <article>\n            We built RipCamp with NodeJS on the backend and MongoDB as the\n            database. We chose MongoDB so we could easily store lots of\n            unrelated records with minimal setup.\n          </article>\n          <article>\n            We leveraged Redux to manage application state, and designed a\n            responsive user interface with ReactJS. We also integrated Google\n            Maps API for the map-based interface, Open Weather API for weather\n            information, and AWS S3 Bucket for photo hosting.\n          </article>\n          <article className=\"cs-bmo\">\n            On the left hand side of RipCamp’s primary interface is the surf\n            spots-index, complete with quickshow items that have names,\n            descriptions, and scrolling photos. On the right hand side is the\n            map, with surf-green pointers for the geographical location of each\n            surf spot. The surf-spots index only displays the spots that are\n            currently shown on the map. If you move the map around, the index\n            will be updated in real time to display the surf spots that are\n            within the map’s bounds.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Home} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article>\n            I used JavaScript DOM manipulation to give this interface some\n            eye-catching UI effects. If you hover your mouse over a surf spot on\n            the map, the surf-spots index will automatically scroll to and\n            highlight the corresponding quickshow item! This makes for smooth\n            navigation and easy discovery of new surf spots.\n          </article>\n          <article className=\"cs-bmo\">\n            When a user clicks on a surf-spot quickshow item from the surf-spots\n            index, they are redirected to a show page that displays local\n            weather conditions and photos of the surf spot.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img src={Show} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            Users can search for a surf spot by name and find its show page, as\n            well as its location on the map. Similarly, users can apply\n            location-based filters to the search, which will recenter the map on\n            the city that they choose.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin cs-bmo\">\n        <img src={Search} alt=\"Search Screenshot\" className=\"cs-img\" />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-img-wrapper cs-img-margin\">\n          <img src={SignUp} alt=\"Signup Screenshot\" className=\"cs-img-small\" />\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Challenges</header>\n          <article>\n            The biggest development challenge on RipCamp was figuring how to\n            query the database and update the application state in such a way\n            that the surf-spots index always displays the surf spots on the map.\n          </article>\n          <article className=\"cs-bmo\">\n            The first few approaches to this problem that I came up with were\n            roundabout and impractical, but I knew that there had to be a\n            straightforward solution. Then, while looking through the docs of\n            Google Maps API I realized that the Map object provides the\n            latitude/longitude coordinates of each corner of the map. Using the\n            northeast and southwest corners, I wrote a query to return all of\n            the spots with coordinates within these ranges.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img\n          src={FindByBounds}\n          alt=\"Feed Screenshot\"\n          className=\"cs-img-medium\"\n        />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            Once I had my API serving up surf spots based on the map’s\n            boundaries, I wrote Redux actions to modify my application state\n            each time a new batch of surf spots comes in. After every “map rest”\n            event (which is fired when you stop moving the map around), the\n            application state clears out the surf spots that were previously\n            displayed. Then, the frontend client requests more surf spots from\n            my API, passing over the new bounds. Finally, the application state\n            and frontend components are updated with the new data.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"cs-img-wrapper cs-img-margin\">\n        <img\n          src={GetSurfSpots}\n          alt=\"Feed Screenshot\"\n          className=\"cs-img-medium\"\n        />\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <article>\n            I ran into a few quirks with my boundaries-based query system. For\n            example, if the map was centered over the prime meridian, the query\n            wouldn’t return any surf spots, because the underlying logic would\n            look for spots greater than the westmost longitude (somewhere around\n            +180°) and less than the eastmost longitude (somewhere around\n            -180°). Fortunately, there are no surf spots on the prime meridian,\n            and I realized that by slightly zooming the map window I could\n            ensure that the prime meridian is never on the map while a surf spot\n            is on the map. This prevents the prime meridian from breaking my\n            query and goes to show that sometimes complicated problems have\n            simple solutions.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Outcome</header>\n          <article>\n            The result of our work was a beautifully designed application with a\n            responsive user interface, and a nuanced query system that\n            integrated seamlessly with the architecture of our application\n            state. These features culminated to empower users with an intuitive\n            new way of discovering surf spots.\n          </article>\n          <article>\n            Furthermore, this project was an invaluable learning experience for\n            me. It taught me how to work with Google Maps API, how to design\n            more responsive and visually interesting user interfaces, and how to\n            engineer sophisticated systems for managing application state.\n          </article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RipCamp;\n"]},"metadata":{},"sourceType":"module"}