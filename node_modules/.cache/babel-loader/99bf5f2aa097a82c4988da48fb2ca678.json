{"ast":null,"code":"var _jsxFileName = \"/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx\";\nimport React from \"react\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\n\nconst RipCamp = () => {\n  return React.createElement(\"div\", {\n    id: \"ripcamp-wrapper\",\n    className: \"cs-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-nav\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }), React.createElement(\"section\", {\n    className: \"cs-topper cs-white-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"cs-topper-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"RipCamp\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Campbell Oleson\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"August 2019\")), React.createElement(\"summary\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"I created a map-based surf locator website that allows users to find surf spots around the globe. RipCamp\\u2019s primary purpose is to connect people with the surf.\"))), React.createElement(\"div\", {\n    className: \"vert-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"catch-img\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Assignment\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"During the later portion of my full-stack web development course with App Academy, two other students and I were tasked with designing and creating a full-stack web application. Being surfing enthusiasts, we came up with the idea of RipCamp: a one-stop-shop for planning your day of surfing.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Planning\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Before beginning on RipCamp, my team and I planned out the architecture of the app. We determined that the primary interface would consist of a map and a surf-spots index, allowing users to get information on a surf spots while simultaneously viewing the spots\\u2019 geographical locations on the map. Furthermore, RipCamp would need to include a search feature so users could locate particular spots. Finally, we decided to include a show page for every surf spot, displaying photos of the spot, as well as information about weather and surf conditions.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"I like to make sure that the projects I work on are organized to make sure that there are no conflicts between features. On this project, my team and I used GitHub to manage version control and Trello to divvy out responsibilities.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Features and Functionality\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"We engineered RipCamp with NodeJS on the backend and MongoDB as the database. We chose MongoDB so we could easily store lots of unrelated records with minimal setup.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"We used Redux to manage application state, and designed a responsive user interface using ReactJS. We also integrated Google Maps API for the maps-based interface, Open Weather API for weather conditions, and AWS S3 Bucket for photo hosting.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"RipCamp\\u2019s home page consists of a map-based interface on the right, enabling users to view the geographical location of surf spots, and a list of surf spots on the left, complete with quickshow items that have names, descriptions, and scrolling photos.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"I used JavaScript DOM manipulation here for some cool UI effects. For example, if you hover your mouse over a surf spot on the map, the list will automatically scroll to and highlight the corresponding quickshow. This makes for smooth navigation and easy discovery of surf spots!\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"If you click on a surf-spot quickshow item from the list, you will be redirected to a surf-spot show page, where you can view photos of the spot and see the local weather conditions.\", \" \"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Once you\\u2019ve befriended a user, you can see their posts in the \\u201CFeed\\u201D component of the app. You can also navigate to a user\\u2019s profile page and see all the content that they have posted. Similarly, you can view a user\\u2019s friends on their profile page by clicking on the \\u201CFriends\\u201D tab.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Challenges\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Developing Fishhook presented me with a variety of challenges as a new developer. The first problem I ran into was how to create \\u201Cfriend-requests\\u201D between users, that, when accepted, would associate the users and allow them to see each other's content.\"), React.createElement(\"article\", {\n    className: \"cs-bmo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"I got around this by creating a \\u201Crequests\\u201D joins table using Ruby on Rails ORM. The table had columns for the \\u201Crequester_id\\u201D, the \\u201Crequested_id\\u201D, and a boolean status field indicating whether or not the request had been accepted. Users create entries in this table when they issue a friend request. Once the receiving user accepts the request, the status field is updated, and the entry becomes an association between the users.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"I also ran into difficult bugs in this project, the most frustrating of which was an error in one of my Redux reducers. I had a JavaScript Object storing arrays. When I tried to copy this object into the updated application state, I used Object.assign(), which created a shallow copy, and preserved the object ids of the arrays inside.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"I spent hours searching for the cause of the unexpected behavior that ensued. Finally, when logging my application state changes with Chrome DevTools, I noticed that the contents of the arrays from previous state changes retroactively updated with each new state change. The \\u201Cold arrays\\u201D would update to have the same contents as the \\u201Cnew arrays\\u201D. This pointed me towards the source of the problem, and taught me a valuable lesson about object identity in JavaScript.\"))), React.createElement(\"div\", {\n    className: \"hor-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cs-textblock\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Conclusion\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"Fishhook was my first full-stack project at App Academy, and my first real venture into software development. It\\u2019s important to note that this project served as an educational experience for me. Not everything about the app is production quality, and there are still plenty of aspects for me to improve upon.\"), React.createElement(\"article\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"I plan to continue to work on Fishhook to improve the user interface, make the layout more responsive to different device sizes, and add the rest of the functionality that I included in the blueprints. All things considered, Fishhook turned out to be an excellent learning experience, and gave me a strong sense of the fundamentals of web development.\"))));\n};\n\nexport default RipCamp;","map":{"version":3,"sources":["/Users/campbelloleson/Desktop/portfolio-website/src/components/case-studies/RipCamp.jsx"],"names":["React","RipCamp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../../stylesheets/case-studies/case-studies.css\";\n\nconst RipCamp = () => {\n  return (\n    <div id=\"ripcamp-wrapper\" className=\"cs-wrapper\">\n      <div className=\"cs-nav\" />\n      <section className=\"cs-topper cs-white-container\">\n        <div className=\"vert-center\">\n          <section className=\"cs-topper-info\">\n            <header>RipCamp</header>\n            <div>\n              <p>Campbell Oleson</p>\n              <p>August 2019</p>\n            </div>\n            <summary>\n              I created a map-based surf locator website that allows users to\n              find surf spots around the globe. RipCamp’s primary purpose is to\n              connect people with the surf.\n            </summary>\n          </section>\n        </div>\n        <div className=\"vert-center\">\n          <div id=\"catch-img\" />\n        </div>\n      </section>\n\n      <div className=\"cs-img-wrapper cs-img-margin cs-tpf cs-tmo\">\n        {/* image */}\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Assignment</header>\n          <article>\n            During the later portion of my full-stack web development course\n            with App Academy, two other students and I were tasked with\n            designing and creating a full-stack web application. Being surfing\n            enthusiasts, we came up with the idea of RipCamp: a one-stop-shop\n            for planning your day of surfing.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Planning</header>\n          <article>\n            Before beginning on RipCamp, my team and I planned out the\n            architecture of the app. We determined that the primary interface\n            would consist of a map and a surf-spots index, allowing users to get\n            information on a surf spots while simultaneously viewing the spots’\n            geographical locations on the map. Furthermore, RipCamp would need\n            to include a search feature so users could locate particular spots.\n            Finally, we decided to include a show page for every surf spot,\n            displaying photos of the spot, as well as information about weather\n            and surf conditions.\n          </article>\n\n          <article>\n            I like to make sure that the projects I work on are organized to\n            make sure that there are no conflicts between features. On this\n            project, my team and I used GitHub to manage version control and\n            Trello to divvy out responsibilities.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Features and Functionality</header>\n          <article>\n            We engineered RipCamp with NodeJS on the backend and MongoDB as the\n            database. We chose MongoDB so we could easily store lots of\n            unrelated records with minimal setup.\n          </article>\n          <article>\n            We used Redux to manage application state, and designed a responsive\n            user interface using ReactJS. We also integrated Google Maps API for\n            the maps-based interface, Open Weather API for weather conditions,\n            and AWS S3 Bucket for photo hosting.\n          </article>\n          <article>\n            RipCamp’s home page consists of a map-based interface on the right,\n            enabling users to view the geographical location of surf spots, and\n            a list of surf spots on the left, complete with quickshow items that\n            have names, descriptions, and scrolling photos.\n          </article>\n          <article>\n            I used JavaScript DOM manipulation here for some cool UI effects.\n            For example, if you hover your mouse over a surf spot on the map,\n            the list will automatically scroll to and highlight the\n            corresponding quickshow. This makes for smooth navigation and easy\n            discovery of surf spots!\n          </article>\n          <article>\n            If you click on a surf-spot quickshow item from the list, you will\n            be redirected to a surf-spot show page, where you can view photos of\n            the spot and see the local weather conditions.{\" \"}\n          </article>\n        </div>\n      </div>\n\n      {/* <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img src={Search} alt=\"Search Screenshot\" className=\"cs-img-small\" />\n          <img\n            src={Requests}\n            alt=\"Requests Modal Screenshot\"\n            className=\"cs-img-small\"\n          />\n        </div>\n      </div> */}\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <article className=\"cs-bmo\">\n            Once you’ve befriended a user, you can see their posts in the “Feed”\n            component of the app. You can also navigate to a user’s profile page\n            and see all the content that they have posted. Similarly, you can\n            view a user’s friends on their profile page by clicking on the\n            “Friends” tab.\n          </article>\n        </div>\n      </div>\n\n      {/* <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img\n            src={UserFeed}\n            alt=\"User Feed Screenshot\"\n            className=\"cs-img-small\"\n          />\n          <img\n            src={Friends}\n            alt=\"Friends Screenshot\"\n            className=\"cs-img-small\"\n          />\n        </div>\n      </div> */}\n\n      {/* <div className=\"cs-img-wrapper cs-img-margin\" >\n        <img src={Feed} alt=\"Feed Screenshot\" className=\"cs-img\" />\n      </div> */}\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock cs-bmo\">\n          <header>Challenges</header>\n          <article>\n            Developing Fishhook presented me with a variety of challenges as a\n            new developer. The first problem I ran into was how to create\n            “friend-requests” between users, that, when accepted, would\n            associate the users and allow them to see each other's content.\n          </article>\n          <article className=\"cs-bmo\">\n            I got around this by creating a “requests” joins table using Ruby on\n            Rails ORM. The table had columns for the “requester_id”, the\n            “requested_id”, and a boolean status field indicating whether or not\n            the request had been accepted. Users create entries in this table\n            when they issue a friend request. Once the receiving user accepts\n            the request, the status field is updated, and the entry becomes an\n            association between the users.\n          </article>\n        </div>\n      </div>\n      {/* \n      <div className=\"hor-center\">\n        <div className=\"cs-img-small-wrapper cs-img-margin\">\n          <img src={Create} alt=\"Create snippet\" className=\"cs-img-small\" />\n          <img src={Update} alt=\"Update snippet\" className=\"cs-img-small\" />\n        </div>\n      </div> */}\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <article>\n            I also ran into difficult bugs in this project, the most frustrating\n            of which was an error in one of my Redux reducers. I had a\n            JavaScript Object storing arrays. When I tried to copy this object\n            into the updated application state, I used Object.assign(), which\n            created a shallow copy, and preserved the object ids of the arrays\n            inside.\n          </article>\n          <article>\n            I spent hours searching for the cause of the unexpected behavior\n            that ensued. Finally, when logging my application state changes with\n            Chrome DevTools, I noticed that the contents of the arrays from\n            previous state changes retroactively updated with each new state\n            change. The “old arrays” would update to have the same contents as\n            the “new arrays”. This pointed me towards the source of the problem,\n            and taught me a valuable lesson about object identity in JavaScript.\n          </article>\n        </div>\n      </div>\n\n      <div className=\"hor-center\">\n        <div className=\"cs-textblock\">\n          <header>Conclusion</header>\n          <article>\n            Fishhook was my first full-stack project at App Academy, and my\n            first real venture into software development. It’s important to note\n            that this project served as an educational experience for me. Not\n            everything about the app is production quality, and there are still\n            plenty of aspects for me to improve upon.\n          </article>\n          <article>\n            I plan to continue to work on Fishhook to improve the user\n            interface, make the layout more responsive to different device\n            sizes, and add the rest of the functionality that I included in the\n            blueprints. All things considered, Fishhook turned out to be an\n            excellent learning experience, and gave me a strong sense of the\n            fundamentals of web development.\n          </article>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RipCamp;\n"]},"metadata":{},"sourceType":"module"}